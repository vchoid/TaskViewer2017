package de.gokv.client.taskviewer.utils;

import java.awt.Color;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import de.gokv.client.taskviewer.controller.LoadProperties;

/**
 * Umwandeln von HTML-Farbcodes in RGB-Farbwerte. Bei fehlerhaften Werten werden
 * Default-Werte geladen.
 * 
 * <p>
 * <b>Methoden:</b>
 * <ul>
 * <li><b>{@link #isHexValid()}</b>: Prüft ein Hex-Farbwert auf syntaktische
 * Korrektheit und liefert ein boolischen Wert</li>
 * <li><b>{@link #parseHexToRGB()}</b>: Wandelt ein Hex-Farbwert in ein
 * RGB-Farbwert um.</li>
 * <li><b>{@link #getDefaultColor()}</b>: Setzt Default-Werte.</li>
 * </ul>
 * </p>
 * 
 * @author Christoph Kiank
 * @version 1.0.0
 *
 */
public class HexaToRGB {

	private Pattern patt;
	private Matcher match;

	private String propFile;
	private String propTitle;
	private String propVal;

	public static String errMsg;

	private LoadProperties loadProp;

	private static final String HEX_PATTERN = "^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$";

	// Konstruktor
	// ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	/**
	 * Verlangt ein Parameter, als String, den Titel aus der .properties-Datei.
	 * 
	 * @param propTitle
	 */
	public HexaToRGB(String propTitle) {
		super();
		this.propTitle = propTitle;
	}

	// ------------------------------------------------------------------------------------------------------
	/**
	 * Lädt zuerst die color.properties-Datei. Holt den jeweiligen zugeordneten
	 * Wert über den Titel in der .properties-Datei und speichert ihn in einer
	 * Variable ab. Wenn der Wert falsch oder leer (null) ist, werden die
	 * default Einstellungen geladen zu den jeweiligen Wert. Ist ein Wert
	 * vorhanden, wird dieser mittels eines Pattern auf eine korrekte Form
	 * überprüft und anschließen mit einen true zurückgegeben.
	 * 
	 * @return boolean
	 */
	public boolean isHexValid() {
		propFile = "color.properties";
		try {
			loadProp = new LoadProperties(propFile, propTitle);
			propVal = loadProp.getPropertyStringVal();
		} catch (Exception e) {
			getDefaultColor();
		}

		if (propVal == null) {
			getDefaultColor();
		}
		patt = Pattern.compile(HEX_PATTERN);
		match = patt.matcher(propVal);
		return match.matches();
	}

	/**
	 * Prüft zuerst ob der Wert valide ist. Wenn ja, dann wandel den Hexfarbcode
	 * in ein RGB-Wert um und gib ihn zurück. Wenn nein, dann setze den Default
	 * Wert ein und gib ihn zurück.
	 * 
	 * @return {@link Color}
	 */
	public Color parseHexToRGB() {
		if (isHexValid()) {
			return Color.decode(propVal);
		} else {
			return Color.decode(getDefaultColor());
		}
	}

	/**
	 * Default-Einstellungswerte für die Hexadezimale Farbdefinition.
	 * <p>
	 * <b>Methoden:</b>
	 * <ul>
	 * <li><b>color.panel.content.background</b>: #f0f0f0</li>
	 * <li><b>color.panel.block.background</b>: #bebebE</li>
	 * <li><b>color.panel.titeltext.foreground</b>: #232d8d</li>
	 * <li><b>color.button.background</b>: #a61f7d</li>
	 * <li><b>color.button.text</b>: #ffffff</li>
	 * <li><b>color.entries.text</b>: #6e6e6e</li>
	 * <li><b>color.label.date.text</b>: #6e6e6e</li>
	 * <li><b>color.info.titel.text</b>: #000000</li>
	 * <li><b>color.info.text</b>: #232d8d</li>
	 * <li><b>color.ErrorMsg.text</b>: #a61f7d</li>
	 * <li><b>color.placeholder.text</b>: #6e6e6e</li>
	 * </ul>
	 * </p>
	 * 
	 * @return {@link String}
	 */
	public String getDefaultColor() {
		switch (propTitle) {
		case "color.panel.content.background":
			errMsg = "Fehler: Der Farbwert '" + this.propVal + "' von '" + this.propTitle
					+ "' wurde auf den Standardwert zurück gesetzt";
			propVal = "#F0F0F0";
			return propVal;
		case "color.panel.block.background":
			errMsg = "Fehler: Der Farbwert '" + this.propVal + "' von '" + this.propTitle
					+ "' wurde auf den Standardwert zurück gesetzt";
			propVal = "#bebebe";
			return propVal;
		case "color.panel.titeltext.foreground":
			errMsg = "Fehler: Der Farbwert '" + this.propVal + "' von '" + this.propTitle
					+ "' wurde auf den Standardwert zurück gesetzt";
			propVal = "#232d8d";
			return propVal;
		case "color.button.background":
			errMsg = "Fehler: Der Farbwert '" + this.propVal + "' von '" + this.propTitle
					+ "' wurde auf den Standardwert zurück gesetzt";
			propVal = "#A61F7D";
			return propVal;
		case "color.button.text":
			errMsg = "Fehler: Der Farbwert '" + this.propVal + "' von '" + this.propTitle
					+ "' wurde auf den Standardwert zurück gesetzt";
			propVal = "#ffffff";
			return propVal;
		case "color.entries.text":
			errMsg = "Fehler: Der Farbwert '" + this.propVal + "' von '" + this.propTitle
					+ "' wurde auf den Standardwert zurück gesetzt";
			propVal = "#6e6e6e";
			return propVal;
		case "color.label.date.text":
			errMsg = "Fehler: Der Farbwert '" + this.propVal + "' von '" + this.propTitle
					+ "' wurde auf den Standardwert zurück gesetzt";
			propVal = "#6e6e6e";
			return propVal;
		case "color.info.titel.text":
			errMsg = "Fehler: Der Farbwert '" + this.propVal + "' von '" + this.propTitle
					+ "' wurde auf den Standardwert zurück gesetzt";
			propVal = "#000000";
			return propVal;
		case "color.info.text":
			errMsg = "Fehler: Der Farbwert '" + this.propVal + "' von '" + this.propTitle
					+ "' wurde auf den Standardwert zurück gesetzt";
			propVal = "#232d8d";
			return propVal;
		case "color.placeholder.text":
			errMsg = "Fehler: Der Farbwert '" + this.propVal + "' von '" + this.propTitle
					+ "' wurde auf den Standardwert zurück gesetzt";
			propVal = "#6e6e6e";
			return propVal;
		}
		return propVal;
	}
}
